diff --git a/src/descrambler/descrambler.c b/src/descrambler/descrambler.c
index 71cc9ebd6..3fd13c9d1 100644
--- a/src/descrambler/descrambler.c
+++ b/src/descrambler/descrambler.c
@@ -966,12 +966,20 @@ key_flush( th_descrambler_runtime_t *dr, th_descrambler_key_t *tk, uint8_t chang
   /* update the keys */
   if (changed & 1) {
     debug2("%p: even key[%d] set for decoder", dr, tk->key_pid);
-    tvhcsa_set_key_even(&tk->key_csa, tk->key_data[0]);
+    tvhcsa_set_key_even(&tk->key_csa, tk->key_data[0]
+#if DVBCSA_KEY_ECM > 0
+                , dr->dr_ecm
+#endif
+    );
     tk->key_valid |= 0x40;
   }
   if (changed & 2) {
     debug2("%p: odd key[%d] set for decoder", dr, tk->key_pid);
-    tvhcsa_set_key_odd(&tk->key_csa, tk->key_data[1]);
+    tvhcsa_set_key_odd(&tk->key_csa, tk->key_data[1]
+#if DVBCSA_KEY_ECM > 0
+                , dr->dr_ecm
+#endif
+    );
     tk->key_valid |= 0x80;
   }
 }
@@ -1370,6 +1378,18 @@ descrambler_table_callback
                   if (tk->key_pid == 0) break;
                 }
               }
+#if DVBCSA_KEY_ECM > 0
+              caid_t *ca;
+              elementary_stream_t *st;
+              TAILQ_FOREACH(st, &mt->mt_service->s_components.set_filter, es_filter_link) {
+                if (st->es_pid != mt->mt_pid) continue;
+                LIST_FOREACH(ca, &st->es_caids, link) {
+                  if (ca->use == 0) continue;
+                  dr->dr_ecm = (ca->caid >> 8 == 0x09 && (ptr[2] - ptr[4]) == 4) ? ptr[21] : 0;
+                  tvhtrace(LS_DESCRAMBLER, "key ecm=%X (caid=%04X)", dr->dr_ecm, ca->caid);
+                }
+              }
+#endif
             }
             tvhtrace(LS_DESCRAMBLER, "ECM message %02x:%02x (section %d, len %d, pid %d) for service \"%s\"",
                      ptr[0], ptr[1], des->number, len, mt->mt_pid, t->s_dvb_svcname);
diff --git a/src/descrambler/descrambler.h b/src/descrambler/descrambler.h
index ac5ff312c..169527dd6 100644
--- a/src/descrambler/descrambler.h
+++ b/src/descrambler/descrambler.h
@@ -103,6 +103,9 @@ typedef struct th_descrambler_runtime {
   int64_t  dr_ecm_start[2];
   int64_t  dr_ecm_last_key_time;
   int64_t  dr_ecm_key_margin;
+#if DVBCSA_KEY_ECM > 0
+  uint8_t  dr_ecm;
+#endif
   int64_t  dr_last_err;
   int64_t  dr_force_skip;
   th_descrambler_key_t dr_keys[DESCRAMBLER_MAX_KEYS];
diff --git a/src/descrambler/tvhcsa.c b/src/descrambler/tvhcsa.c
index 942ce92b5..febdb4838 100644
--- a/src/descrambler/tvhcsa.c
+++ b/src/descrambler/tvhcsa.c
@@ -220,7 +220,11 @@ tvhcsa_set_type( tvhcsa_t *csa, struct mpegts_service *s, int type )
 }
 
 
-void tvhcsa_set_key_even( tvhcsa_t *csa, const uint8_t *even )
+void tvhcsa_set_key_even( tvhcsa_t *csa, const uint8_t *even
+#if DVBCSA_KEY_ECM > 0
+			, const uint8_t ecm
+#endif
+)
 {
   switch (csa->csa_type) {
   case DESCRAMBLER_CSA_CBC:
@@ -241,7 +245,11 @@ void tvhcsa_set_key_even( tvhcsa_t *csa, const uint8_t *even )
   }
 }
 
-void tvhcsa_set_key_odd( tvhcsa_t *csa, const uint8_t *odd )
+void tvhcsa_set_key_odd( tvhcsa_t *csa, const uint8_t *odd
+#if DVBCSA_KEY_ECM > 0
+			, const uint8_t ecm
+#endif
+)
 {
   assert(csa->csa_type);
   switch (csa->csa_type) {
diff --git a/src/descrambler/tvhcsa.h b/src/descrambler/tvhcsa.h
index 855de5acc..267f6478c 100644
--- a/src/descrambler/tvhcsa.h
+++ b/src/descrambler/tvhcsa.h
@@ -66,8 +66,20 @@ typedef struct tvhcsa
 
 int  tvhcsa_set_type( tvhcsa_t *csa, struct mpegts_service *s, int type );
 
-void tvhcsa_set_key_even( tvhcsa_t *csa, const uint8_t *even );
-void tvhcsa_set_key_odd ( tvhcsa_t *csa, const uint8_t *odd );
+void tvhcsa_set_key_even( tvhcsa_t *csa, const uint8_t *even
+#if DVBCSA_KEY_ECM > 0
+			, const uint8_t ecm
+#endif
+);
+void tvhcsa_set_key_odd ( tvhcsa_t *csa, const uint8_t *odd
+#if DVBCSA_KEY_ECM > 0
+			, const uint8_t ecm
+#endif
+);
+
+#if DVBCSA_KEY_ECM > 0
+#define dvbcsa_bs_key_set(a, b) dvbcsa_bs_key_set_ecm(ecm, a, b)
+#endif
 
 void tvhcsa_init    ( tvhcsa_t *csa );
 void tvhcsa_destroy ( tvhcsa_t *csa );
