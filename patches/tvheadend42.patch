diff --git a/configure b/configure
index 2151b472f..8300bae2d 100755
--- a/configure
+++ b/configure
@@ -624,6 +624,14 @@ if enabled cwc || enabled capmt || enabled constcw; then
      check_cc_lib    dvbcsa dvbcsa_l) ||\
     die "Failed to find dvbcsa support (use --disable-dvbcsa)"
     LDFLAGS="$LDFLAGS -ldvbcsa"
+    check_cc '
+    #include <dvbcsa/dvbcsa.h>
+    int test(void)
+    {
+      dvbcsa_bs_key_set_ecm;
+      return 0;
+    }
+    ' && CFLAGS="$CFLAGS -DDVBCSA_KEY_ECM=1" && printf "    ^ dvbcsa new\n"
   fi
 fi
 
diff --git a/src/descrambler/descrambler.c b/src/descrambler/descrambler.c
index ae57ded53..500991d26 100644
--- a/src/descrambler/descrambler.c
+++ b/src/descrambler/descrambler.c
@@ -876,6 +876,8 @@ descrambler_table_callback
   th_descrambler_runtime_t *dr;
   LIST_HEAD(,descrambler_ecmsec) sections;
   int emm = (mt->mt_flags & MT_FAST) == 0;
+  elementary_stream_t *st;
+  caid_t *ca;
 
   if (len < 6)
     return 0;
@@ -936,6 +938,14 @@ descrambler_table_callback
               dr->dr_ecm_start[ptr[0] & 1] = mclk();
               if (dr->dr_quick_ecm)
                 dr->dr_key_valid &= ~(1 << ((ptr[0] & 1) + 6)); /* 0x40 = even, 0x80 = odd */
+              TAILQ_FOREACH(st, &mt->mt_service->s_filt_components, es_filt_link) {
+                if (st->es_pid != mt->mt_pid) continue;
+                LIST_FOREACH(ca, &st->es_caids, link) {
+                  if (ca->use == 0) continue;
+                  dr->dr_csa.csa_ecm = (ca->caid >> 8 == 0x09 && (ptr[4] != 0 && (ptr[2] - ptr[4]) == 4)) ? ptr[21] : 0;
+                  tvhtrace(LS_DESCRAMBLER, "key ecm=%X (caid=%04X)", dr->dr_csa.csa_ecm, ca->caid);
+                }
+              }
             }
             tvhtrace(LS_DESCRAMBLER, "ECM message %02x (section %d, len %d, pid %d) for service \"%s\"",
                      ptr[0], des->number, len, mt->mt_pid, t->s_dvb_svcname);
diff --git a/src/descrambler/ffdecsa/FFdecsa.c b/src/descrambler/ffdecsa/FFdecsa.c
index ce0c28a1f..564009b8d 100644
--- a/src/descrambler/ffdecsa/FFdecsa.c
+++ b/src/descrambler/ffdecsa/FFdecsa.c
@@ -192,7 +192,8 @@ static void key_schedule_stream(
 
 static void key_schedule_block(
   unsigned char *ck,    // [In]  ck[0]-ck[7]   8 bytes | Key.
-  unsigned char *kk)    // [Out] kk[0]-kk[55] 56 bytes | Key schedule.
+  unsigned char *kk,    // [Out] kk[0]-kk[55] 56 bytes | Key schedule.
+  unsigned char ecm)    // ecm
 {
   static const unsigned char key_perm[0x40] = {
     0x12,0x24,0x09,0x07,0x2A,0x31,0x1D,0x15, 0x1C,0x36,0x3E,0x32,0x13,0x21,0x3B,0x40,
@@ -201,6 +202,25 @@ static void key_schedule_block(
     0x3C,0x05,0x38,0x2B,0x0B,0x06,0x0A,0x2C, 0x20,0x3F,0x2E,0x0F,0x03,0x26,0x10,0x37,
   };
 
+  static const unsigned char csa_block_perm_ecm[0x100] = {
+    0x00,0x02,0x80,0x82,0x20,0x22,0xa0,0xa2, 0x04,0x06,0x84,0x86,0x24,0x26,0xa4,0xa6,
+    0x40,0x42,0xc0,0xc2,0x60,0x62,0xe0,0xe2, 0x44,0x46,0xc4,0xc6,0x64,0x66,0xe4,0xe6,
+    0x01,0x03,0x81,0x83,0x21,0x23,0xa1,0xa3, 0x05,0x07,0x85,0x87,0x25,0x27,0xa5,0xa7,
+    0x41,0x43,0xc1,0xc3,0x61,0x63,0xe1,0xe3, 0x45,0x47,0xc5,0xc7,0x65,0x67,0xe5,0xe7,
+    0x08,0x0a,0x88,0x8a,0x28,0x2a,0xa8,0xaa, 0x0c,0x0e,0x8c,0x8e,0x2c,0x2e,0xac,0xae,
+    0x48,0x4a,0xc8,0xca,0x68,0x6a,0xe8,0xea, 0x4c,0x4e,0xcc,0xce,0x6c,0x6e,0xec,0xee,
+    0x09,0x0b,0x89,0x8b,0x29,0x2b,0xa9,0xab, 0x0d,0x0f,0x8d,0x8f,0x2d,0x2f,0xad,0xaf,
+    0x49,0x4b,0xc9,0xcb,0x69,0x6b,0xe9,0xeb, 0x4d,0x4f,0xcd,0xcf,0x6d,0x6f,0xed,0xef,
+    0x10,0x12,0x90,0x92,0x30,0x32,0xb0,0xb2, 0x14,0x16,0x94,0x96,0x34,0x36,0xb4,0xb6,
+    0x50,0x52,0xd0,0xd2,0x70,0x72,0xf0,0xf2, 0x54,0x56,0xd4,0xd6,0x74,0x76,0xf4,0xf6,
+    0x11,0x13,0x91,0x93,0x31,0x33,0xb1,0xb3, 0x15,0x17,0x95,0x97,0x35,0x37,0xb5,0xb7,
+    0x51,0x53,0xd1,0xd3,0x71,0x73,0xf1,0xf3, 0x55,0x57,0xd5,0xd7,0x75,0x77,0xf5,0xf7,
+    0x18,0x1a,0x98,0x9a,0x38,0x3a,0xb8,0xba, 0x1c,0x1e,0x9c,0x9e,0x3c,0x3e,0xbc,0xbe,
+    0x58,0x5a,0xd8,0xda,0x78,0x7a,0xf8,0xfa, 0x5c,0x5e,0xdc,0xde,0x7c,0x7e,0xfc,0xfe,
+    0x19,0x1b,0x99,0x9b,0x39,0x3b,0xb9,0xbb, 0x1d,0x1f,0x9d,0x9f,0x3d,0x3f,0xbd,0xbf,
+    0x59,0x5b,0xd9,0xdb,0x79,0x7b,0xf9,0xfb, 0x5d,0x5f,0xdd,0xdf,0x7d,0x7f,0xfd,0xff
+  };
+
   int i,j,k;
   int bit[64];
   int newbit[64];
@@ -210,11 +230,11 @@ static void key_schedule_block(
   // 56 key bytes kk(55)..kk(0) by key schedule from ck
 
   // kb(6,0) .. kb(6,7) = ck(0) .. ck(7)
-  kb[6][0] = ck[0];
+  kb[6][0] = ecm==4?csa_block_perm_ecm[ck[0]]:ck[0];
   kb[6][1] = ck[1];
   kb[6][2] = ck[2];
   kb[6][3] = ck[3];
-  kb[6][4] = ck[4];
+  kb[6][4] = ecm==4?csa_block_perm_ecm[ck[4]]:ck[4];
   kb[6][5] = ck[5];
   kb[6][6] = ck[6];
   kb[6][7] = ck[7];
@@ -463,7 +483,7 @@ static void block_decypher_group (
 
 //-----set control words
 
-static void schedule_key(struct csa_key_t *key, const unsigned char *pk){
+static void schedule_key(struct csa_key_t *key, const unsigned char *pk, const unsigned char ecm){
   // could be made faster, but is not run often
   int bi,by;
   int i,j;
@@ -483,7 +503,7 @@ static void schedule_key(struct csa_key_t *key, const unsigned char *pk){
     }
   }
 // precalculations for block
-  key_schedule_block(key->ck,key->kk);
+  key_schedule_block(key->ck,key->kk,ecm);
   for(i=0;i<56;i++){
     for(j=0;j<BYTES_PER_BATCH;j++){
       *(((unsigned char *)&key->kkmulti[i])+j)=key->kk[i];
@@ -491,25 +511,25 @@ static void schedule_key(struct csa_key_t *key, const unsigned char *pk){
   }
 }
 
-extern void FUNC(set_control_words)(void *keys, const unsigned char *ev, const unsigned char *od);
+extern void FUNC(set_control_words)(void *keys, const unsigned char *ev, const unsigned char *od, const unsigned char ecm);
 
-void FUNC(set_control_words)(void *keys, const unsigned char *ev, const unsigned char *od)
+void FUNC(set_control_words)(void *keys, const unsigned char *ev, const unsigned char *od, const unsigned char ecm)
 {
-  schedule_key(&((struct csa_keys_t *)keys)->even,ev);
-  schedule_key(&((struct csa_keys_t *)keys)->odd,od);
+  schedule_key(&((struct csa_keys_t *)keys)->even,ev,ecm);
+  schedule_key(&((struct csa_keys_t *)keys)->odd,od,ecm);
 }
 
-extern void FUNC(set_even_control_word)(void *keys, const unsigned char *pk);
+extern void FUNC(set_even_control_word)(void *keys, const unsigned char *pk, const unsigned char ecm);
 
-void FUNC(set_even_control_word)(void *keys, const unsigned char *pk)
+void FUNC(set_even_control_word)(void *keys, const unsigned char *pk, const unsigned char ecm)
 {
-  schedule_key(&((struct csa_keys_t *)keys)->even,pk);
+  schedule_key(&((struct csa_keys_t *)keys)->even,pk,ecm);
 }
 
-extern void FUNC(set_odd_control_word)(void *keys, const unsigned char *pk);
+extern void FUNC(set_odd_control_word)(void *keys, const unsigned char *pk, const unsigned char ecm);
 
-void FUNC(set_odd_control_word)(void *keys, const unsigned char *pk){
-  schedule_key(&((struct csa_keys_t *)keys)->odd,pk);
+void FUNC(set_odd_control_word)(void *keys, const unsigned char *pk, const unsigned char ecm){
+  schedule_key(&((struct csa_keys_t *)keys)->odd,pk,ecm);
 }
 
 //-----get internal parallelism
@@ -541,7 +561,7 @@ void *FUNC(get_key_struct)(void)
   struct csa_keys_t *keys=(struct csa_keys_t *)MALLOC(sizeof(struct csa_keys_t));
   if(keys) {
     static const unsigned char pk[8] = { 0,0,0,0,0,0,0,0 };
-    FUNC(set_control_words)(keys,pk,pk);
+    FUNC(set_control_words)(keys,pk,pk,0);
     }
   return keys;
 }
diff --git a/src/descrambler/ffdecsa/FFdecsa.h b/src/descrambler/ffdecsa/FFdecsa.h
index cd0923c08..533ad06eb 100644
--- a/src/descrambler/ffdecsa/FFdecsa.h
+++ b/src/descrambler/ffdecsa/FFdecsa.h
@@ -43,13 +43,13 @@ void *get_key_struct(void);
 void free_key_struct(void *keys);
 
 // -- set control words, 8 bytes each
-void set_control_words(void *keys, const unsigned char *even, const unsigned char *odd);
+void set_control_words(void *keys, const unsigned char *even, const unsigned char *odd, const unsigned char ecm);
 
 // -- set even control word, 8 bytes
-void set_even_control_word(void *keys, const unsigned char *even);
+void set_even_control_word(void *keys, const unsigned char *even, const unsigned char ecm);
 
 // -- set odd control word, 8 bytes
-void set_odd_control_word(void *keys, const unsigned char *odd);
+void set_odd_control_word(void *keys, const unsigned char *odd, const unsigned char ecm);
 
 // -- get control words, 8 bytes each
 //void get_control_words(void *keys, unsigned char *even, unsigned char *odd);
diff --git a/src/descrambler/ffdecsa/ffdecsa_interface.c b/src/descrambler/ffdecsa/ffdecsa_interface.c
index f5a93c4db..30c526b91 100644
--- a/src/descrambler/ffdecsa/ffdecsa_interface.c
+++ b/src/descrambler/ffdecsa/ffdecsa_interface.c
@@ -31,8 +31,8 @@ typedef struct {
   void (*free_key_struct)(void *keys);
   void (*set_control_words)(void *keys, const unsigned char *even, const unsigned char *odd);
 
-  void (*set_even_control_word)(void *keys, const unsigned char *even);
-  void (*set_odd_control_word)(void *keys, const unsigned char *odd);
+  void (*set_even_control_word)(void *keys, const unsigned char *even, const uint8_t ecm);
+  void (*set_odd_control_word)(void *keys, const unsigned char *odd, const uint8_t ecm);
   int (*decrypt_packets)(void *keys, unsigned char **cluster);
 
 } csafuncs_t;
@@ -44,8 +44,8 @@ extern int get_suggested_cluster_size_##x(void);\
 extern void *get_key_struct_##x(void);\
 extern void free_key_struct_##x(void *keys);\
 extern void set_control_words_##x(void *keys, const unsigned char *even, const unsigned char *odd);\
-extern void set_even_control_word_##x(void *keys, const unsigned char *even);\
-extern void set_odd_control_word_##x(void *keys, const unsigned char *odd);\
+extern void set_even_control_word_##x(void *keys, const unsigned char *even, const uint8_t ecm);\
+extern void set_odd_control_word_##x(void *keys, const unsigned char *odd, const uint8_t ecm);\
 extern int decrypt_packets_##x(void *keys, unsigned char **cluster);\
 static csafuncs_t funcs_##x = { \
   &get_internal_parallelism_##x,\
@@ -225,15 +225,15 @@ free_key_struct(void *keys)
 }
 
 void
-set_even_control_word(void *keys, const unsigned char *even)
+set_even_control_word(void *keys, const unsigned char *even, const uint8_t ecm)
 {
-  current.set_even_control_word(keys, even);
+  current.set_even_control_word(keys, even, ecm);
 }
 
 void
-set_odd_control_word(void *keys, const unsigned char *odd)
+set_odd_control_word(void *keys, const unsigned char *odd, const uint8_t ecm)
 {
-  current.set_odd_control_word(keys, odd);
+  current.set_odd_control_word(keys, odd, ecm);
 }
 
 int
diff --git a/src/descrambler/tvhcsa.c b/src/descrambler/tvhcsa.c
index 3345e4c68..c9eeb6a6a 100644
--- a/src/descrambler/tvhcsa.c
+++ b/src/descrambler/tvhcsa.c
@@ -187,7 +187,7 @@ void tvhcsa_set_key_even( tvhcsa_t *csa, const uint8_t *even )
 #if ENABLE_DVBCSA
     dvbcsa_bs_key_set(even, csa->csa_key_even);
 #else
-    set_even_control_word((csa)->csa_keys, even);
+    set_even_control_word((csa)->csa_keys, even, csa->csa_ecm);
 #endif
     break;
   case DESCRAMBLER_AES:
@@ -206,7 +206,7 @@ void tvhcsa_set_key_odd( tvhcsa_t *csa, const uint8_t *odd )
 #if ENABLE_DVBCSA
     dvbcsa_bs_key_set(odd, csa->csa_key_odd);
 #else
-    set_odd_control_word((csa)->csa_keys, odd);
+    set_odd_control_word((csa)->csa_keys, odd, csa->csa_ecm);
 #endif
     break;
   case DESCRAMBLER_AES:
diff --git a/src/descrambler/tvhcsa.h b/src/descrambler/tvhcsa.h
index 46950ddcc..5c3b822d0 100644
--- a/src/descrambler/tvhcsa.h
+++ b/src/descrambler/tvhcsa.h
@@ -26,6 +26,9 @@ struct elementary_stream;
 #include "build.h"
 #if ENABLE_DVBCSA
 #include <dvbcsa/dvbcsa.h>
+#if DVBCSA_KEY_ECM > 0
+#define dvbcsa_bs_key_set(a,b) dvbcsa_bs_key_set_ecm(csa->csa_ecm,a,b)
+#endif
 #else
 #include "ffdecsa/FFdecsa.h"
 #endif
@@ -49,6 +52,7 @@ typedef struct tvhcsa
   int      csa_cluster_size;
   uint8_t *csa_tsbcluster;
   int      csa_fill;
+  uint8_t  csa_ecm;
 
 #if ENABLE_DVBCSA
   struct dvbcsa_bs_batch_s *csa_tsbbatch_even;
